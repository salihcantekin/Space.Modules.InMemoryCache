name: Prod CI (Stable Publish)

on:
  push:
    branches:
      - master

concurrency:
  group: prod-ci
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  prod-ci:
    runs-on: ubuntu-latest
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      PROJECT: src/Space.Modules.InMemoryCache/Space.Modules.InMemoryCache.csproj
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x
          cache: true

      - name: Ensure Tag @ HEAD
        id: tag
        shell: bash
        run: |
          set -euo pipefail
          if git describe --tags --exact-match >/dev/null 2>&1; then
            TAG=$(git describe --tags --exact-match)
            if [[ ! $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Tag $TAG is not a stable semantic version tag (vX.Y.Z)." >&2
              exit 1
            fi
            echo "Found stable tag: $TAG"
            VERSION=${TAG#v}
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "### Stable Version: $VERSION" >> $GITHUB_STEP_SUMMARY
          else
            echo "No exact tag at HEAD. Create a stable vX.Y.Z tag before pushing to master." >&2
            exit 1
          fi

      - name: Build (Release)
        run: dotnet build "$PROJECT" -c Release --no-restore -p:Version=${VERSION} -p:ContinuousIntegrationBuild=true

      - name: Test (with coverage)
        run: >
          dotnet test tests/InMemoryCache.Tests/InMemoryCache.Tests.csproj
          -c Release --no-build --logger trx
          --collect:"XPlat Code Coverage"

      - name: Dependency Vulnerability Scan
        run: dotnet list "$PROJECT" package --vulnerable --include-transitive || true

      - name: Pack
        run: |
          mkdir -p artifacts
          echo "Packing $PROJECT -> ${VERSION}";
          dotnet pack "$PROJECT" -c Release --no-build -p:PackageVersion=${VERSION} -p:ContinuousIntegrationBuild=true -o artifacts

      - name: Publish Stable Packages (NuGet)
        if: success()
        run: dotnet nuget push "./artifacts/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

      - name: Publish Outputs
        run: |
          mkdir -p drop
          dotnet publish "$PROJECT" -c Release -o "drop/Space.Modules.InMemoryCache" -p:Version=${VERSION} -p:ContinuousIntegrationBuild=true
          cp artifacts/*.nupkg drop/

      - name: Upload Drop Artifact
        uses: actions/upload-artifact@v4
        with:
            name: prod-drop
            path: drop
            retention-days: 14

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: prod-test-results
          path: tests/**/TestResults/*.trx
          retention-days: 14

      - name: Upload Coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: prod-coverage
          path: '**/coverage.cobertura.xml'
          retention-days: 14
